#####################################################################
#   Printer Startup  
#####################################################################
[gcode_macro PRINTER_STARTUP]
gcode:
  {% set xyspeed = printer.configfile.settings.printer.max_velocity * 60 * 0.90 %}
  {% set zspeed = printer.configfile.settings.printer.max_z_velocity * 60 * 0.60 %}
  {% set etemp = printer["gcode_macro _Printer_Variables"].etemp|default(175)|int %}
  {% set btemp = printer["gcode_macro _Printer_Variables"].btemp|default(50)|int %}
  {% set warmonboot = printer["gcode_macro _Printer_Variables"].warmonboot|default(0)|int %}
  {% set dockableprobe = printer["gcode_macro _Printer_Variables"].dockableprobe|default(0)|int %}
  {% set ztiltadjust = printer["gcode_macro _Printer_Variables"].ztiltadjust|default(0)|int %}
  {% set autozcalibrate = printer["gcode_macro _Printer_Variables"].autozcalibrate|default(0)|int %}
  {% set main_panel = printer["gcode_macro _Printer_Variables"].main_panel|default(0)|int %}
  {% set bed_panel = printer["gcode_macro _Printer_Variables"].bed_panel|default(0)|int %}
  
  {% if (main_panel) %}
    SET_LED_EFFECT EFFECT=printer_init FADETIME=1.0
  {% endif %}
  {% if (bed_panel) %}
    SET_LED_EFFECT EFFECT=bed_temp FADETIME=1.0
  {% endif %}
  {% if (warmonboot) %}
    M104 S{etemp}
    M140 S{btemp}
  {% endif %}
  SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset (adjust Z offset if needed)
  G28
  {% if ztiltadjust == 1 %}
    {% if dockableprobe == 1 %}
      ATTACH_PROBE_LOCK
    {% endif %}
    Z_TILT_ADJUST
  {% endif %}
  {% if autozcalibrate == 1 %}
    #G1 X{printer.toolhead.axis_maximum.x*0.90} Y{printer.toolhead.axis_maximum.y*0.90} F{xyspeed} ; move out of the print area
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={etemp}
    CALIBRATE_Z
    {% if dockableprobe == 1 %}
      DOCK_PROBE_UNLOCK
    {% endif %}  
  {% endif %}
  G90
  G1 X{printer.toolhead.axis_maximum.x*0.75} Y{printer.toolhead.axis_maximum.y*0.25} Z{printer.toolhead.axis_maximum.z*0.05} F{xyspeed}
  G1 X{printer.toolhead.axis_maximum.x*0.25} Y{printer.toolhead.axis_maximum.y*0.25} Z{printer.toolhead.axis_maximum.z*0.10} F{xyspeed}
  G1 X{printer.toolhead.axis_maximum.x*0.25} Y{printer.toolhead.axis_maximum.y*0.75} Z{printer.toolhead.axis_maximum.z*0.15} F{xyspeed}
  G1 X{printer.toolhead.axis_maximum.x*0.75} Y{printer.toolhead.axis_maximum.y*0.75} Z{printer.toolhead.axis_maximum.z*0.05} F{xyspeed}
  {% if (main_panel) %}
    SET_LED_EFFECT EFFECT=printer_idle FADETIME=1.0
  {% endif %}
#####################################################################


#####################################################################
#   Printer Park
#####################################################################
[gcode_macro PARK]
gcode:
  {% set x_park = printer.toolhead.axis_maximum.x|float * 0.9 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float * 0.9 %}
  {% set z_park = printer.toolhead.position.z + ((printer.toolhead.axis_maximum.z-printer.toolhead.position.z) * 0.75)|float %}
  {% if printer.toolhead.homed_axes != "xyz" %}
    {printer.gcode.action_respond_info("Printer not homed, can not park")}
    M84
  {% else %}
    G90
    G1 Z{z_park} F1600
    G1 X{x_park} Y{y_park} F6000
    M84
  {% endif %}
  {% if (main_panel) %}
    SET_LED_EFFECT EFFECT=printer_park FADETIME=1.0
  {% endif %}
#####################################################################


#####################################################################
#  Printer Power Management
#####################################################################
[gcode_macro ACTIVATE_POWER_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60

[gcode_macro DEACTIVATE_POWER_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=0

[delayed_gcode POWER_OFF_PRINTER_CHECK_ACT]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
  {% else %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60
  {% endif %}

[delayed_gcode POWER_OFF_PRINTER_CHECK]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    {% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 50.0 %}
        {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            _POWER_OFF_PRINTER
        {% else %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
        {% endif %}
    {% else %}
        {% if printer.idle_timeout.state == "Printing" %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
        {% else %}
            {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
            {% else %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            {% endif %}
        {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro _POWER_OFF_PRINTER]
gcode:
  M107
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}
#####################################################################


#####################################################################
#  Print Management Macros
#####################################################################

#  Print Start
[gcode_macro PRINT_START]
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}                                         
    # set configured/calcucated variables
    {% set xyspeed = printer.configfile.settings.printer.max_velocity * 60 * 0.60 %}
    {% set zspeed = printer.configfile.settings.printer.max_z_velocity * 60 * 0.60 %}
    {% set N = printer.configfile.settings.extruder.nozzle_diameter %}
    {% set BTEMP = params.BED|default(svv.btemp)|float %}
    {% set ETEMP = params.EXTRUDER|default(svv.etemp)|float %}
    {% if (svv.main_led|float) %}
      NEOPIXEL_DISPLAY LED="main" TYPE=print_percent MODE=progress
    {% endif %}
    M140 S{BTEMP} ; Start bed heating
    M106 S128 ; run nozzle fan to prevent ooze
    M104 S{ETEMP-10} ; Set temporary nozzle temp during homing and auto bed leveling
    G90 ; Use absolute coordinates
    M83 ; extruder relative mode
    LAZY_HOME
    {% if svv.dockableprobe == 1 %}
        ATTACH_PROBE_LOCK
    {% endif %}
    G1 X{printer.toolhead.axis_maximum.x*0.90} Y{printer.toolhead.axis_maximum.y*0.90} F{xyspeed} ; move out of the print area
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={ETEMP-10}
    G1 E-10 F100 ; retract filament to prevent ooze
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BTEMP}
    #G28 Z ; force home for thermal expansion. # Don't think this was really needed
    {% if svv.ztiltadjust == 1 %}
        LAZY_TILT
    {% endif %}
    {% if svv.bedmeshonprint == 1 %}
        {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}  ## Adaptive Bed Mesh
        COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE} ## Adaptive Bed Mesh
    {% endif %}
    {% if svv.autozcalibrate == 1 %}
        G1 X{printer.toolhead.axis_maximum.x*0.90} Y{printer.toolhead.axis_maximum.y*0.90} F{xyspeed} ; move out of the print area
        M104 S{ETEMP} ; Set nozzle temperature
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={ETEMP}
        LAZY_CALIBRATE_Z
    {% endif %}
    {% if svv.bedmeshonprint == 1 %}
        {% if svv.autozcalibrate == 1 %}
            {% if svv.bedmeshtype == 1 %}
                ADAPTIVE_BED_MESH FORCE_MESH=1
            {% else %}
                BED_MESH_CALIBRATE
            {% endif %}
        {% else %}
            {% if svv.bedmeshtype == 1 %}
                ADAPTIVE_BED_MESH FORCE_MESH=1 SIZE={FL_SIZE}
            {% else %}
                BED_MESH_CALIBRATE
            {% endif %}
        {% endif %}
    {% endif %}
    {% if svv.dockableprobe == 1 %}
        DOCK_PROBE_UNLOCK
    {% endif %}
    M106 S0 ; disable nozzle fan
    M109 S{ETEMP} ; Set and wait for nozzle to reach temperature
    M190 S{BTEMP} ; Set and wait for bed to reach temperature
    M83 ; reset extruder
    G1 E11 F200 ; advance filament to prepare for print
    {% if svv.wipeline == 1 %}
        WIPE_LINE N={N} ; Wipe line at 75% of nozzle width for height
    {% endif %}

#  Print End 
[gcode_macro PRINT_END]
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}   
    {% set N = printer.configfile.settings.extruder.nozzle_diameter %}

    M140 S0
    M104 S0
    M107
    G91
    G1 Z10 F3000
    G90
    G1 E-10 F100 ; retract filament ooze on next print
    M106 S255
    PARK
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30

#  Print Pause
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}   
    PAUSE_BASE
    _TOOLHEAD_PARK_PAUSE_CANCEL
    {% if (svv.main_led|float) %}
      SET_LED LED=main RED=1.0 GREEN=0.66 BLUE=0.0 WHITE=0.0 [TRANSMIT=0] [SYNC=1]
    {% endif %}

#  Print Resume
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}   
    ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
    {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      M83
      G1 E{extrude} F2100
      {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if (svv.main_led|float) %}
      SET_LED LED=main RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0 [TRANSMIT=0] [SYNC=1]
    {% endif %}
    RESUME_BASE {get_params}

#  Print Cancel
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  # read in saved variables
  {% set svv = printer.save_variables.variables %}   
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  {% if (svv.main_led|float) %}
    SET_LED LED=main RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0 [TRANSMIT=0] [SYNC=1]
  {% endif %}
  M106 S255
  PARK
  UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
#####################################################################
#####################################################################


#####################################################################
#   Printer Macros
#####################################################################






#   Conditional Homing  
[gcode_macro LAZY_HOME]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}

[gcode_macro LAZY_TILT]
gcode:  
    {% if printer.z_tilt != "applied" %}
      Z_TILT_ADJUST
    {% endif %}

[gcode_macro LAZY_CALIBRATE_Z]
gcode:
  {% if printer.z_calibration.last_query != True %}
    CALIBRATE_Z
  {% endif %}

#   Notify User
[gcode_macro NOTIFY]
gcode:
  {% if 'MSG' in params %}
    RESPOND TYPE=command MSG="action:notification {MSG}"
  {% endif %}

#   Save Variables
[gcode_macro SAVE_AT_END]
variable_save: 0
gcode:
  SET_GCODE_VARIABLE MACRO=SAVE_AT_END VARIABLE=save VALUE=1

[gcode_macro SAVE_IF_SET]
gcode:
  {% if printer["gcode_macro SAVE_AT_END"].save == 1 %}
    SAVE_CONFIG
  {% endif %}
#####################################################################
#####################################################################


#####################################################################
#####################################################################
#   Supporting Macros
#####################################################################
#####################################################################
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

#####################################################################
#   Filament Load
#####################################################################
[force_move]
enable_force_move: True

[gcode_macro FILAMENT_LOAD]
gcode:
    LOAD_FILAMENT
    
[gcode_macro LOAD_FILAMENT]
gcode:
    {% set L = printer["gcode_macro _Printer_Variables"].feedlength|default(0)|int %}
    {% set FORCESTEPPER = printer["gcode_macro _Printer_Variables"].feedforce|default('extruder')|string %}
    {% set LOADTEMP = printer["gcode_macro _Printer_Variables"].etemp|default(175)|int %}
    {% set TEMPCHANGE = false %}

    {% if printer.extruder.temperature < LOADTEMP %}
      {% set TEMPCHANGE = true %}
    {% endif %}
    {% if printer.toolhead.status == "Printing" %}
      {printer.gcode.action_respond_info("This command cannot be used while printing")}
    {% else %}
      M83                               # set extruder to relative mode
      {% if TEMPCHANGE %}
        M104 S{LOADTEMP}                # set hotend temp
      {% endif %}
      G92 E0
      G4 P2000                          # wait for two second
      {% if FORCE != "" %}
        FORCE_MOVE STEPPER="{FORCESTEPPER}" DISTANCE=15 VELOCITY=5 ACCEL=1000  # load filament inside the gears force move needs to be enabled
      {% endif %}
      {% if printer.pause_resume.is_paused == false %}
        {% if L > 50 %}
          G1 E{L-50} F1000              # continue extraction
        {% endif %}
        {% if TEMPCHANGE %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={LOADTEMP}    # wait for extruder minimum temp
        {% endif %}
        G1 E50 F300                     # extrude 50mm
        M400                            # wait for current move to finish
        {% if TEMPCHANGE %}
          M104 S0 T0                    # set hotend temperature to 0
        {% endif %}
      {% endif %}
      G92 E0                            # zero extruder position
    {% endif %}
#####################################################################


#####################################################################
#   Filament Unload
#####################################################################
[gcode_macro FILAMENT_UNLOAD]
gcode:
    UNLOAD_FILAMENT
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set L = printer["gcode_macro _Printer_Variables"].feedlength|default(0)|int %}
    {% set FORCESTEPPER = printer["gcode_macro _Printer_Variables"].feedforce|default('extruder')|string %}
    {% set LOADTEMP = printer["gcode_macro _Printer_Variables"].etemp|default(175)|int %}
    {% set TEMPCHANGE = false %}

    {% if printer.extruder.temperature < LOADTEMP %}
      {% set TEMPCHANGE = true %}
    {% endif %}
    {% if printer.toolhead.status == "Printing" %}
      {printer.gcode.action_respond_info("This command cannot be used while printing")}
    {% else %}
      M83                                      # set extruder to relative mode
      G92 E0
      {% if TEMPCHANGE %}
        M109 S{LOADTEMP} T0
      {% endif %}
      G1 E-5 F3600                       # extract filament to cold end
      G1 E-30 F300                       # continue extraction slow allow filament to be cooled enough before reaches the gears
      {% if L > 35 %}
        G1 E-{L-35} F1000             # continue extraction
      {% endif %}
      {% if TEMPCHANGE %}
        M104 S0 T0
      {% endif %}
    {% endif %}
#####################################################################

