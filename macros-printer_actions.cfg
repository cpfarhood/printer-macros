[pause_resume]

#####################################################################
#   Printer Startup  
#####################################################################
[gcode_macro PRINTER_STARTUP]
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}                                         
    # set configured/calcucated variables
    {% set xyspeed = printer.configfile.settings.printer.max_velocity * 60 * 0.90 %}
    {% set zspeed = printer.configfile.settings.printer.max_z_velocity * 60 * 0.60 %}
    {% if (svv.warmonboot|float) %}
      M104 S{svv.etemp}
      M140 S{svv.btemp}
      {% if (svv.bed_led|float) %}
        NEOPIXEL_DISPLAY LED="bed" TYPE=bed_temp MODE=glow
      {% endif %}
    {% if (svv.main_led|float) %}
      NEOPIXEL_DISPLAY LED="main" TYPE=bed_temp MODE=progress
    {% endif %}
    {% endif %}
    G28
    {% if svv.ztiltadjust == 1 %}
       Z_TILT_ADJUST
    {% else %}
       G90
       G1 X{printer.toolhead.axis_maximum.x*0.75} Y{printer.toolhead.axis_maximum.y*0.25} Z{printer.toolhead.axis_maximum.z*0.05} F{xyspeed}
       G1 X{printer.toolhead.axis_maximum.x*0.25} Y{printer.toolhead.axis_maximum.y*0.25} Z{printer.toolhead.axis_maximum.z*0.10} F{xyspeed}
       G1 X{printer.toolhead.axis_maximum.x*0.25} Y{printer.toolhead.axis_maximum.y*0.75} Z{printer.toolhead.axis_maximum.z*0.15} F{xyspeed}
       G1 X{printer.toolhead.axis_maximum.x*0.75} Y{printer.toolhead.axis_maximum.y*0.75} Z{printer.toolhead.axis_maximum.z*0.05} F{xyspeed}
    {% endif %}

#####################################################################
#   Printer Park
#####################################################################
[gcode_macro PARK]
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}   
    {% set x_park = printer.toolhead.axis_maximum.x|float * 0.9 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float * 0.9 %}
    {% set z_park = printer.toolhead.position.z + ((printer.toolhead.axis_maximum.z-printer.toolhead.position.z) * 0.75)|float %}
    {% if printer.toolhead.homed_axes != "xyz" %}
        {printer.gcode.action_respond_info("Please home XYZ first")}
    {% else %}
        G90
        G1 Z{z_park} F1600
        G1 X{x_park} Y{y_park} F6000
        M84

    {% endif %}


#####################################################################
#   Conditional Homing  
#####################################################################
[gcode_macro LAZY_HOME]
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}   
    {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% endif %}


#####################################################################
#   Start Print Macro
#####################################################################
[gcode_macro PRINT_START]
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}                                         
    # set configured/calcucated variables
    {% set xyspeed = printer.configfile.settings.printer.max_velocity * 60 * 0.60 %}
    {% set zspeed = printer.configfile.settings.printer.max_z_velocity * 60 * 0.60 %}
    {% set N = printer.configfile.settings.extruder.nozzle_diameter %}
    {% set BTEMP = params.BED|default(svv.btemp)|float %}
    {% set ETEMP = params.EXTRUDER|default(svv.etemp)|float %}
    {% if (svv.main_led|float) %}
      NEOPIXEL_DISPLAY LED="main" TYPE=print_percent MODE=progress
    {% endif %}
    M140 S{BTEMP} ; Start bed heating
    M106 S128 ; run nozzle fan to prevent ooze
    M104 S{ETEMP-10} ; Set temporary nozzle temp during homing and auto bed leveling
    G90 ; Use absolute coordinates
    M83 ; extruder relative mode
    SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset (adjust Z offset if needed)
    LAZY_HOME
    {% if svv.dockableprobe == 1 %}
        ATTACH_PROBE_LOCK
    {% endif %}
    G1 X{printer.toolhead.axis_maximum.x*0.90} Y{printer.toolhead.axis_maximum.y*0.90} F{xyspeed} ; move out of the print area
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={ETEMP-10}
    G1 E-10 F100 ; retract filament to prevent ooze
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BTEMP}
    G28 Z ; force home for thermal expansion
    {% if svv.ztiltadjust == 1 %}
        Z_TILT_ADJUST
    {% endif %}
    {% if svv.bedmeshonprint == 1 %}
        {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}  ## Adaptive Bed Mesh
        COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE} ## Adaptive Bed Mesh
    {% endif %}
    {% if svv.autozcalibrate == 1 %}
        G1 X{printer.toolhead.axis_maximum.x*0.90} Y{printer.toolhead.axis_maximum.y*0.90} F{xyspeed} ; move out of the print area
        M104 S{ETEMP} ; Set nozzle temperature
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={ETEMP}
        CALIBRATE_Z
    {% endif %}
    {% if svv.bedmeshonprint == 1 %}
        {% if svv.autozcalibrate == 1 %}
            {% if svv.bedmeshtype == 1 %}
                ADAPTIVE_BED_MESH FORCE_MESH=1
            {% else %}
                BED_MESH_CALIBRATE
            {% endif %}
        {% else %}
            {% if svv.bedmeshtype == 1 %}
                ADAPTIVE_BED_MESH SIZE={FL_SIZE}
            {% else %}
                BED_MESH_CALIBRATE
            {% endif %}
        {% endif %}
    {% endif %}
    {% if svv.dockableprobe == 1 %}
        DOCK_PROBE_UNLOCK
    {% endif %}
    M106 S0 ; disable nozzle fan
    M109 S{ETEMP} ; Set and wait for nozzle to reach temperature
    M190 S{BTEMP} ; Set and wait for bed to reach temperature
    M83 ; reset extruder
    G1 E11 F200 ; advance filament to prepare for print
    {% if svv.wipeline == 1 %}
        WIPE_LINE N={N} ; Wipe line at 75% of nozzle width for height
    {% endif %}


#####################################################################
#   Print End Macro 
#####################################################################
[gcode_macro PRINT_END]
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}   
    {% set N = printer.configfile.settings.extruder.nozzle_diameter %}

    M140 S0
    M104 S0
    M107
    G91
    G1 Z10 F3000
    G90
    G1 E-10 F100 ; retract filament ooze on next print
    PARK


#####################################################################
#   Pause Printing
#####################################################################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}   
    PAUSE_BASE
    _TOOLHEAD_PARK_PAUSE_CANCEL
    {% if (svv.main_led|float) %}
      SET_LED LED=main RED=1.0 GREEN=0.66 BLUE=0.0 WHITE=0.0 [TRANSMIT=0] [SYNC=1]
    {% endif %}



#####################################################################
#   Resume Printing
#####################################################################
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}   
    ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
    {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      M83
      G1 E{extrude} F2100
      {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if (svv.main_led|float) %}
      SET_LED LED=main RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0 [TRANSMIT=0] [SYNC=1]
    {% endif %}
    RESUME_BASE {get_params}


#####################################################################
#   Cancel Printing
#####################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    # read in saved variables
    {% set svv = printer.save_variables.variables %}   
    ## Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
      _TOOLHEAD_PARK_PAUSE_CANCEL
    {% endif %}
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    {% if (svv.main_led|float) %}
      SET_LED LED=main RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0 [TRANSMIT=0] [SYNC=1]
    {% endif %}



#####################################################################
#   Power Off Printer
#####################################################################
[gcode_macro POWEROFF]
gcode:
  PARK
  RESPOND TYPE=command MSG=action:poweroff
  {action_call_remote_method("set_device_power",
                             device="main",
                             state="off")}


#####################################################################
#   Notify User
#####################################################################
[gcode_macro NOTIFY]
gcode:
    {% if 'MSG' in params %}
    RESPOND TYPE=command MSG="action:notification {MSG}"
    {% endif %}


#####################################################################
#   Save Variables
#####################################################################
[gcode_macro SAVE_AT_END]
variable_save: 0
gcode:
    SET_GCODE_VARIABLE MACRO=SAVE_AT_END VARIABLE=save VALUE=1

[gcode_macro SAVE_IF_SET]
gcode:
    {% if printer["gcode_macro SAVE_AT_END"].save == 1 %}
    SAVE_CONFIG
    {% endif %}


[idle_timeout]
timeout: 600
gcode:
    M84
    TURN_OFF_HEATERS
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=50
    POWEROFF

#####################################################################
#####################################################################
#   Supporting Macros
#####################################################################
#####################################################################
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
